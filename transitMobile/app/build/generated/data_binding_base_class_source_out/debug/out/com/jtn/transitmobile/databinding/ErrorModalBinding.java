// Generated by view binder compiler. Do not edit!
package com.jtn.transitmobile.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.jtn.transitmobile.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ErrorModalBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnAceptarE;

  @NonNull
  public final ImageView imageCerrarE;

  @NonNull
  public final ImageView imageViewE;

  @NonNull
  public final TextView lblError;

  @NonNull
  public final TextView lblErrorDescripcion;

  private ErrorModalBinding(@NonNull ConstraintLayout rootView, @NonNull Button btnAceptarE,
      @NonNull ImageView imageCerrarE, @NonNull ImageView imageViewE, @NonNull TextView lblError,
      @NonNull TextView lblErrorDescripcion) {
    this.rootView = rootView;
    this.btnAceptarE = btnAceptarE;
    this.imageCerrarE = imageCerrarE;
    this.imageViewE = imageViewE;
    this.lblError = lblError;
    this.lblErrorDescripcion = lblErrorDescripcion;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ErrorModalBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ErrorModalBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.error_modal, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ErrorModalBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_aceptarE;
      Button btnAceptarE = ViewBindings.findChildViewById(rootView, id);
      if (btnAceptarE == null) {
        break missingId;
      }

      id = R.id.image_cerrarE;
      ImageView imageCerrarE = ViewBindings.findChildViewById(rootView, id);
      if (imageCerrarE == null) {
        break missingId;
      }

      id = R.id.imageViewE;
      ImageView imageViewE = ViewBindings.findChildViewById(rootView, id);
      if (imageViewE == null) {
        break missingId;
      }

      id = R.id.lblError;
      TextView lblError = ViewBindings.findChildViewById(rootView, id);
      if (lblError == null) {
        break missingId;
      }

      id = R.id.lblError_descripcion;
      TextView lblErrorDescripcion = ViewBindings.findChildViewById(rootView, id);
      if (lblErrorDescripcion == null) {
        break missingId;
      }

      return new ErrorModalBinding((ConstraintLayout) rootView, btnAceptarE, imageCerrarE,
          imageViewE, lblError, lblErrorDescripcion);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
